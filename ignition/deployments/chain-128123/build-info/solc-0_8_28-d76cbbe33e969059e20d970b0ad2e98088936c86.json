{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-d76cbbe33e969059e20d970b0ad2e98088936c86",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Donation.sol": "project/contracts/Donation.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/Donation.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title Donation Contract\n * @author Senior Smart Contract Developer\n * @notice A secure donation contract where anyone can donate but only the owner can withdraw\n * @dev Implements OpenZeppelin-style security patterns and gas optimizations\n */\ncontract Donation {\n    // =============================================================================\n    // STATE VARIABLES\n    // =============================================================================\n    \n    /// @notice The owner of the contract (deployer) - only address that can withdraw\n    address public immutable owner;\n    \n    /// @notice Total amount donated to the contract\n    uint256 public totalDonated;\n    \n    /// @notice Total amount withdrawn by the owner\n    uint256 public totalWithdrawn;\n    \n    /// @notice Mapping of donor address to total amount donated\n    mapping(address => uint256) public donorContributions;\n    \n    /// @notice Array of all unique donors for enumeration\n    address[] public donors;\n    \n    /// @notice Mapping to check if address has donated before (to avoid duplicate entries in donors array)\n    mapping(address => bool) public hasDonated;\n    \n    /// @notice Reentrancy guard state\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n    uint256 private reentrancyStatus;\n\n    // =============================================================================\n    // EVENTS\n    // =============================================================================\n    \n    /// @notice Emitted when a donation is received\n    /// @param donor The address of the donor\n    /// @param amount The amount donated\n    /// @param newTotal The new total balance of the contract\n    event DonationReceived(address indexed donor, uint256 amount, uint256 newTotal);\n    \n    /// @notice Emitted when funds are withdrawn by the owner\n    /// @param owner The address of the owner\n    /// @param amount The amount withdrawn\n    /// @param remainingBalance The remaining balance in the contract\n    event FundsWithdrawn(address indexed owner, uint256 amount, uint256 remainingBalance);\n    \n    /// @notice Emitted when the contract receives direct ETH transfers\n    /// @param sender The address that sent ETH\n    /// @param amount The amount of ETH received\n    event DirectTransferReceived(address indexed sender, uint256 amount);\n\n    // =============================================================================\n    // ERRORS\n    // =============================================================================\n    \n    /// @notice Thrown when caller is not the owner\n    error NotOwner();\n    \n    /// @notice Thrown when donation amount is zero\n    error ZeroDonation();\n    \n    /// @notice Thrown when withdrawal amount is zero or exceeds balance\n    error InvalidWithdrawalAmount();\n    \n    /// @notice Thrown when ETH transfer fails\n    error TransferFailed();\n    \n    /// @notice Thrown when reentrancy is detected\n    error ReentrancyGuard();\n\n    // =============================================================================\n    // MODIFIERS\n    // =============================================================================\n    \n    /// @notice Restricts function access to contract owner only\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert NotOwner();\n        _;\n    }\n    \n    /// @notice Prevents reentrancy attacks\n    modifier nonReentrant() {\n        if (reentrancyStatus == ENTERED) revert ReentrancyGuard();\n        reentrancyStatus = ENTERED;\n        _;\n        reentrancyStatus = NOT_ENTERED;\n    }\n\n    // =============================================================================\n    // CONSTRUCTOR\n    // =============================================================================\n    \n    /// @notice Initialize the contract with the deployer as owner\n    constructor() {\n        owner = msg.sender;\n        reentrancyStatus = NOT_ENTERED;\n    }\n\n    // =============================================================================\n    // EXTERNAL FUNCTIONS\n    // =============================================================================\n    \n    /// @notice Donate ETH to the contract\n    /// @dev Anyone can call this function to donate ETH\n    function donate() external payable {\n        if (msg.value == 0) revert ZeroDonation();\n        \n        // Update donor contributions\n        donorContributions[msg.sender] += msg.value;\n        \n        // Add to donors array if first time donating\n        if (!hasDonated[msg.sender]) {\n            hasDonated[msg.sender] = true;\n            donors.push(msg.sender);\n        }\n        \n        // Update total donated\n        totalDonated += msg.value;\n        \n        emit DonationReceived(msg.sender, msg.value, address(this).balance);\n    }\n    \n    /// @notice Withdraw the full balance to owner's address\n    /// @dev Only the contract owner can call this function\n    function withdrawAll() external onlyOwner nonReentrant {\n        uint256 balance = address(this).balance;\n        if (balance == 0) revert InvalidWithdrawalAmount();\n        \n        totalWithdrawn += balance;\n        \n        // Use call instead of transfer for better gas handling\n        (bool success, ) = payable(owner).call{value: balance}(\"\");\n        if (!success) revert TransferFailed();\n        \n        emit FundsWithdrawn(owner, balance, 0);\n    }\n    \n    /// @notice Withdraw a specific amount to owner's address\n    /// @param amount The amount of ETH to withdraw (in wei)\n    /// @dev Only the contract owner can call this function\n    function withdraw(uint256 amount) external onlyOwner nonReentrant {\n        if (amount == 0 || amount > address(this).balance) {\n            revert InvalidWithdrawalAmount();\n        }\n        \n        totalWithdrawn += amount;\n        uint256 remainingBalance = address(this).balance - amount;\n        \n        // Use call instead of transfer for better gas handling\n        (bool success, ) = payable(owner).call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n        \n        emit FundsWithdrawn(owner, amount, remainingBalance);\n    }\n\n    // =============================================================================\n    // VIEW FUNCTIONS\n    // =============================================================================\n    \n    /// @notice Get the current balance of the contract\n    /// @return The current ETH balance in wei\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    /// @notice Get the number of unique donors\n    /// @return The total number of unique donors\n    function getDonorCount() external view returns (uint256) {\n        return donors.length;\n    }\n    \n    /// @notice Get donor address by index\n    /// @param index The index in the donors array\n    /// @return The donor address at the given index\n    function getDonorByIndex(uint256 index) external view returns (address) {\n        require(index < donors.length, \"Index out of bounds\");\n        return donors[index];\n    }\n    \n    /// @notice Get donation statistics\n    /// @return totalBalance Current contract balance\n    /// @return totalDonations Total amount ever donated\n    /// @return totalWithdrawals Total amount withdrawn by owner\n    /// @return uniqueDonors Number of unique donors\n    function getStats() external view returns (\n        uint256 totalBalance,\n        uint256 totalDonations,\n        uint256 totalWithdrawals,\n        uint256 uniqueDonors\n    ) {\n        return (\n            address(this).balance,\n            totalDonated,\n            totalWithdrawn,\n            donors.length\n        );\n    }\n\n    // =============================================================================\n    // FALLBACK FUNCTIONS\n    // =============================================================================\n    \n    /// @notice Receive function to handle direct ETH transfers\n    /// @dev Treats direct transfers as donations\n    receive() external payable {\n        if (msg.value > 0) {\n            // Update donor contributions\n            donorContributions[msg.sender] += msg.value;\n            \n            // Add to donors array if first time donating\n            if (!hasDonated[msg.sender]) {\n                hasDonated[msg.sender] = true;\n                donors.push(msg.sender);\n            }\n            \n            // Update total donated\n            totalDonated += msg.value;\n            \n            emit DirectTransferReceived(msg.sender, msg.value);\n        }\n    }\n    \n    /// @notice Fallback function for any other calls\n    /// @dev Reverts to prevent accidental calls\n    fallback() external payable {\n        revert(\"Function not found\");\n    }\n}\n"
      }
    }
  }
}